# -*- sh -*-
# prompt theme
# Borrowed liberally from the ZSH example prompts and
# Phil! Gregory's ZSH Prompt:
#   http://www.aperiodic.net/phil/prompt/
#   http://www.aperiodic.net/phil/prompt/prompt.txt
# In addition, I have to thank Bart for the showing current git branch:
# http://www.jukie.net/~bart/blog/20071219221358

export PR_CUR_GIT_BRANCH=''

parse_git_branch() {
        git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/'
}

function prompt_docwhat_precmd {
    local TERMWIDTH
    (( TERMWIDTH = ${COLUMNS} - 1 ))

    ###
    # Update the git branch variable
    case "$(history $(($HISTCMD - 1)))" in
        *git*)
            export PR_CUR_GIT_BRANCH="$(parse_git_branch)"
            ;;
    esac

    ###
    # Truncate the path if it's too long.
    PR_FILLBAR=""
    PR_PWDLEN=""
    PR_RDATA=""

    if [ -z $PR_CUR_GIT_BRANCH ] ; then
        PR_RDATA=${(%):-%D{\%a\,\%b\%e}}
    else
        PR_RDATA=git:${PR_CUR_GIT_BRANCH}
    fi
    local promptsize=${#${(%):---(%m:%l)---()--}}
    local pwd=${(%):-%~}
    local pwdsize=${#${pwd}}

    # 10 is the width of the extra characters...
    if [[ "$promptsize + $pwdsize" -gt $TERMWIDTH ]]; then
        ((PR_PWDLEN=$TERMWIDTH - $promptsize))
    else
        PR_FILLBAR="\${(l.(($TERMWIDTH - $promptsize - $pwdsize))..${PR_HBAR}.)}"
    fi
}

#  set the tab window title (%t) for screen
function set_screen_tab () {
    if [[ "$TERM" == "screen" ]]; then
        setopt local_options
        local TEXT="${1}"
        if [[ "${2}" == "true" ]]; then
            TEXT=$(print -Pn "%(!.!.)${TEXT}")
            if [[ -n "${SSH_CLIENT}" && -z "${STY}" ]]; then
                TEXT="${HOST}:${TEXT}"
            fi
        fi
        echo -ne "\x1bk${TEXT}\x1b\\";
    fi
    return 0;
}

prompt_docwhat_chpwd () {
    export PR_CUR_GIT_BRANCH="$(parse_git_branch)"
}

prompt_docwhat_preexec () {
    setopt local_options
    setopt extended_glob
    set_screen_tab "${1[(wr)^(*=*|sudo|ssh|exec|nice|-*)]}" true
}

prompt_docwhat_setup () {
    ###
    # Decide if we need to set titlebar text.
    case $TERM in
    xterm*)
        PR_TITLEBAR=$'%{\e]0;%(!.-=*[%n]*=- | .)%n@%m:%~ | ${COLUMNS}x${LINES} | %y\a%}'
        ;;
    screen)
        PR_TITLEBAR=$'%{\e_screen \005 (\005t) | %(!.-=[%n]=- | .)%n@%m:%~ | ${COLUMNS}x${LINES} | %y\e\\%}'
        ;;
    *)
        PR_TITLEBAR=''
        ;;
    esac

    ###
    # See if we can use colors.
    autoload colors zsh/terminfo
    if [[ (-n "$terminfo[colors]" && "$terminfo[colors]" -ge 8) || "$(tput colors 2> /dev/null || :)" -ge 8 ]]; then
        for color in RED GREEN YELLOW BLUE MAGENTA CYAN WHITE BLACK; do
                eval PR_LIGHT_$color='%{$fg_bold[${(L)color}]%}'
                eval PR_$color='%{$fg_no_bold[${(L)color}]%}'
        done
        PR_NO_COLOR="%{$reset_color%}"

        PR_MAIN_COLOR="${PR_BLUE}"
        PR_SECOND_COLOR="${PR_LIGHT_GREEN}"
    fi
    #####################
    # Special characters?
    if [[ -z "$terminfo" ]]; then
        PR_USE_SPECIALCHARS='no'
    else
        PR_USE_SPECIALCHARS='yes'
    fi

    ###
    # Are we connected remotely via SSH?
    if [[ -n "$SSH_CLIENT" ]]; then
        PR_HOSTCOLOR="${PR_LIGHT_GREEN}"
    else
        PR_HOSTCOLOR="${PR_YELLOW}"
    fi

    ###
    # Special Graphical Characters
    if [[ "$PR_USE_SPECIALCHARS" = "yes" ]]; then
        typeset -A altchar
        set -A altchar ${(s..)terminfo[acsc]}
        PR_SET_CHARSET="%{$terminfo[enacs]%}"
        PR_SHIFT_IN="%{$terminfo[smacs]%}"
        PR_SHIFT_OUT="%{$terminfo[rmacs]%}"
        PR_HBAR=${altchar[q]:--}
        PR_ULCORNER=${altchar[l]:--}
        PR_LLCORNER=${altchar[m]:--}
        PR_URCORNER=${altchar[k]:--}
        PR_LRCORNER=${altchar[j]:--}
    else
        PR_HBAR="-"
        PR_ULCORNER="/"
        PR_LLCORNER="\\"
        PR_URCORNER="\\"
        PR_LRCORNER="/"
    fi
    unset PR_USE_SPECIALCHARS

    ###
    # Decide whether to set a screen title
    if [[ "$TERM" == "screen" ]]; then
        PR_STITLE=$(set_screen_tab "${ZSH_NAME}" true)
    else
        PR_STITLE=''
    fi

    ###
    # Set the chpwd variables
    prompt_docwhat_chpwd

    ###
    # Finally, the prompt.
    PROMPT='$PR_SET_CHARSET$PR_STITLE${(e)PR_TITLEBAR}\
$PR_MAIN_COLOR$PR_SHIFT_IN$PR_ULCORNER$PR_SECOND_COLOR$PR_SHIFT_IN$PR_HBAR$PR_SHIFT_OUT(\
$PR_HOSTCOLOR%m$PR_CYAN:$PR_YELLOW%l\
$PR_SECOND_COLOR)$PR_SHIFT_IN$PR_HBAR$PR_MAIN_COLOR$PR_SHIFT_IN$PR_HBAR${(e)PR_FILLBAR}$PR_SECOND_COLOR$PR_SHIFT_IN$PR_HBAR$PR_SHIFT_OUT(\
$PR_MAGENTA%$PR_PWDLEN<...<%~%<<\
$PR_SECOND_COLOR)$PR_SHIFT_IN$PR_HBAR$PR_MAIN_COLOR$PR_SHIFT_IN$PR_URCORNER$PR_SHIFT_OUT\

$PR_MAIN_COLOR$PR_SHIFT_IN$PR_LLCORNER$PR_SECOND_COLOR$PR_SHIFT_IN$PR_HBAR$PR_SHIFT_OUT(\
%(?..$PR_LIGHT_YELLOW%- $PR_LIGHT_RED%?$PR_SECOND_COLOR:)\
%(!.$PR_LIGHT_RED.$PR_LIGHT_YELLOW)%n$PR_SECOND_COLOR)\
$PR_SHIFT_IN$PR_HBAR$PR_SHIFT_OUT\
$PR_MAIN_COLOR$PR_SHIFT_IN$PR_HBAR$PR_SHIFT_OUT\
$PR_NO_COLOR '

    RPROMPT=' $PR_MAIN_COLOR$PR_SHIFT_IN$PR_HBAR$PR_SECOND_COLOR$PR_SHIFT_IN$PR_HBAR$PR_SHIFT_OUT\
($PR_YELLOW$PR_RDATA$PR_SECOND_COLOR)$PR_SHIFT_IN$PR_HBAR$PR_MAIN_COLOR$PR_SHIFT_IN$PR_LRCORNER$PR_SHIFT_OUT$PR_NO_COLOR'

    PS2='$PR_MAIN_COLOR$PR_SHIFT_IN$PR_HBAR$PR_SHIFT_OUT\
$PR_SECOND_COLOR$PR_SHIFT_IN$PR_HBAR$PR_SHIFT_OUT(\
$PR_LIGHT_CYAN%_$PR_SECOND_COLOR)$PR_SHIFT_IN$PR_HBAR$PR_SHIFT_OUT\
$PR_MAIN_COLOR$PR_SHIFT_IN$PR_HBAR$PR_SHIFT_OUT$PR_NO_COLOR '

  prompt_opts=( cr subst percent )
  precmd  () { prompt_docwhat_precmd "$@" }
  preexec () { prompt_docwhat_preexec "$@" }
  chpwd ()   { prompt_docwhat_chpwd "$@" }
}

prompt_docwhat_setup "$@"

#EOF
